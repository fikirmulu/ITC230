<html>
<head>
    <title>React App Demo</title>

    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">

const MusicIndex = (props) => {
    console.log (props)
    const list_items=props.items.map((item) => {
        return <li onClick={props.clickhandler} key= {item.title}>{item.title}</li>
    })
    return <div>
        <h2>Music collection</h2>
        <ul>{list_items}</ul> 
        <hr/>
    </div>
}

const MusicDetail = (props) => {

    return <div> 
      <form>
          Title:<input onChange={props.change} type="text" name="title" value={props.item.title || ""}/><p/>
          Artist:<input onChange={props.change} type="text" name="artist" value={props.item.artist || ""}/><p/>
          genre:<input onChange={props.change} type="text" name="genre" value={props.item.genre || ""}/><p/>
          year:<input onChange={props.change} type="text" name="year" value={props.item.year || ""}/><p/>
          
      </form> 
       <p/><button onClick={props.save}>Save</button>
       <button onClick={props.delete}>Delete</button>
       <button onClick={props.clear}>Clear</button>
    </div>
}

class App extends React.Component {
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            items: {{{ musics }}},
            currentMusic: { } // current selected item
          }
        this.handleClick = this.handleClick.bind(this);
        this.onChange = this.onChange.bind(this);
        this.onSave = this.onSave.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onClear = this.onClear.bind(this);
      }

handleClick(e) {
        let clicked= e.target.innerText
        console.log(clicked)
        let newMusic=this.state.items.find((item) => {
            return item.title == clicked
        })
        console.log(newMusic)
        this.setState ({
        currentMusic: newMusic
        });
    }

    // clear details form
      onClear() {
        this.setState({currentMusic: {}});
      }
     
    //handle detail form changes
    onChange(event) {
        var newMusic = this.state.currentMusic;
        console.log(event.target)
        newMusic[event.target.name] = event.target.value
        this.setState({currentMusic: newMusic});
    }
    //handle item delete
    onDelete() {
        let newMusic = this.state.currentMusic;
        console.log(newMusic)
    fetch("/api/delete?title="+newMusic.title)
    .then((response) => {
        return response.json();
    })
    .then((result) => {
        let newItems = this.state.items.filter((item) => {
        return item.title !== newMusic.title;
        });
     this.setState({items: newItems, currentMusic:{}});   
        console.log(result) 
    })
    .catch(err => console.log(err))
    }
    
    //handle item save
    onSave() {
        let newMusic = this.state.currentMusic;
    if (!newMusic.title) {
          return;
        }
    delete newMusic["_id"]
    fetch("/api/add/", {
    method: "POST",
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(newMusic)
    })
    .then(response => response.json())
        .then((json) => { 
       
        let newData;
          if (!newMusic.title) { // add new item to array
            newData = this.state.items;
            newMusic.title = json.this;
            newData.push(newMusic);
          } else { // update existing item
            newData = this.state.items.map((item) => {
              if (item.title === newMusic.this) {
                item = newMusic;
              }
              return item;
            });
          }
          // Update state with new array
          this.setState({items: newData});
        });
      }

      render() {
        // render app UI elements
        return (
          <div>
          <h2>My music collections</h2>
          <MusicIndex items={this.state.items} clickhandler={this.handleClick}/>
          <MusicDetail change={this.onChange} save={this.onSave} clear={this.onClear} delete={this.onDelete} item={this.state.currentMusic}/>
          </div>
          );
          
      }
}  

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>

